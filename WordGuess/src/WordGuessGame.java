import java.io.*;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import java.util.InputMismatchException;

public class WordGuessGame {
	
	static boolean forbidden = false; // Wonder what this does? hmmm...
	// Prints the title, calls helper methods to get and mask the magic word to be guessed.
	public static void main(String[] args) throws IOException {
		System.out.println("            GUESS THE MAGIC WORD");
		System.out.println("<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>");
		String word = getWord(); // Placeholder for the winning word generated by getWord().
    String maskedWord = maskWord(word); // Placeholder for the obfuscated word from maskWord().
    Scanner reader = new Scanner(System.in); // Scanner is opened and closed out here.
    playGame(word, maskedWord, reader); // Passes the winning word and masked version, and the Scanner to gameplay method.
    reader.close();
	}	
	// Imports the word dictionary from words_alpha.txt to an ArrayList, then randomly selects a word and returns it.
	private static String getWord() throws IOException {
		BufferedReader in = null;
		String wordToGuess = "";
    try {
       in = new BufferedReader(new FileReader("words_alpha.txt"));

       String line;
       ArrayList<String> wordList = new ArrayList<>();
       while ((line = in.readLine()) != null) {
          wordList.add(line);
       }
       Random rand = new Random();
       int wordIndex = rand.nextInt(wordList.size());
       wordToGuess = wordList.get(wordIndex);
    } finally {
       if (in != null) {
          in.close();
       }
    }
    return wordToGuess.toUpperCase();
	}
	// Masks the word as a string of hyphens to obfuscate for game play.
	private static String maskWord(String wordToMask) {
		String masked = "";
		for (int i=0; i < wordToMask.length(); i++) {
			masked = masked + "-";
		}
		return masked;
	}
	// Method containing game play.
	private static void playGame(String winningWord, String playSpace, Scanner input) {
		String playerGuess; // Holds the player entry during each turn
		char[] playSpaceMod = playSpace.toCharArray(); // Character array is easier to index.
		String guessed = ""; // Holds the letters that have already been guessed.
		int guessRemain = 7; // Player gets 6 guesses, loses when this variable = 1 due to use of a switch.
		boolean winner = false; // Boolean to hold open the game play loop.
		char check; // Placeholder for the player's guess, converted to char for ease of use.
		System.out.println("A mysterious magic word has been carved into a tree,");
		System.out.println("but the letters have been hidden by a spell!");
		System.out.println("In the nearby swamp, a terrible monster lurks.");
		System.out.println("To defeat it, you must guess the letters in the word.");
		System.out.println("Play by the rules, and don't try any curses.");
		System.out.println("An incorrect guess will attract the beast! Good luck!");
		printMonster(guessRemain);
		while (!(winner)) { // Continues until winner is made true by checkForWin().
			System.out.println();
			System.out.println("        >>>  " + playSpace + "  <<<");
			if (guessRemain > 2) { // Corrects grammar for the final guess (so there aren't "1 guesses remaining").
				System.out.println("You have " + (guessRemain - 1) + " guesses remaining.");
			} else {
				System.out.println("You have only 1 guess remaining!"); // Correct grammar for a single guess.
			}
			if (guessed != "") { // Only prints the guessed letters if the string is not empty.
				System.out.println("These letters have already been used: " + guessed.toUpperCase());
			}
			System.out.print("Please choose a letter to guess: ");
			try { // Catches various exception throws (and an easter egg).
				playerGuess = input.nextLine().toUpperCase();
				if (potterverse(playerGuess)) { // Easter egg helper function here.
					throw new IllegalArgumentException(); // I shouldn'tve done that. I should NOT have done that.
				}
				if ((playerGuess.length() > 1) || (playerGuess.matches(".*\\d+.*"))) { 
					throw new InputMismatchException(); // Throws if the guess input is more than one character, or a number.
				}
				if (guessed.contains(playerGuess)) {
					throw new RuntimeException(); // Throws if the letter has already been guessed.
				}
				if (winningWord.contains(playerGuess)) { // Only run the check/replace/update if the letter is a correct guess.
					System.out.println();
					System.out.println("GOOD GUESS!");
					check = playerGuess.charAt(0);
					for (int i = 0; i < playSpace.length(); i++) { // Loop through all spaces, in case correct guess has multiple indexes.
						if (winningWord.charAt(i) == check) { // Verifies index of the matching character.
							playSpaceMod[i] = check; // Puts the single character guess at the correct matching index of the winning word.
							playSpace = String.valueOf(playSpaceMod); // Write character array into play space for easy output.
						}
					}
				} else {
					guessRemain = guessRemain - 1; // Reduce number of remaining guesses if guess is incorrect.
					System.out.println();
					System.out.println("THAT LETTER IS NOT IN THE WORD."); // Inform of incorrect guess.
					printMonster(guessRemain); // Call helper method to print progress of monster coming out of swamp.
				}
				guessed = guessed + playerGuess; // Adds the guessed character to string of previous attempts.
				winner = checkForWin(playSpace); // Calls helper method to see if word has been completed.
				if (guessRemain == 1) { // Has to call this at 1 instead of 0 due to use of a switch, which cannot use a case of 0.
					winner = true; // Closes the game play loop. The monster wins.
					System.out.println("NO GUESSES LEFT! THE MONSTER HAS YOU!! GAME OVER.");
					System.out.println();
					System.out.println("As the light fades, you realize the magic word must have been " + winningWord); // Hindsight is 20/20.
				}
			} catch (IllegalArgumentException iae) {
				forbidden = true; // Wait, seriously what does this do? That can't be good...
			}	catch (InputMismatchException ime) {
				System.out.println(); // Error message if the guess was too long or was a number.
				System.out.println("YOUR GUESS MUST BE A SINGLE LETTER! TRY AGAIN.");
			} catch (RuntimeException rte) {
				System.out.println(); // Error message if the guess had already been tried.
				System.out.println("THAT LETTER HAS ALREADY BEEN GUESSED! TRY AGAIN.");
			}
		}		
	}
	// Prints the progress of a the monster coming out of the swamp, updated after each incorrect guess.
	private static void printMonster(int counter) {
		switch(counter) { // Here's why the player guesses start at 7 and end at 1. Total of 6 guesses.
			case 7:
				System.out.println();
				System.out.println("   __vVvV____________o__________________VVvv__");
				System.out.println("IN THE NEARBY SWAMP IT IS MOSTLY SILENT AND STILL.");
				break;
			case 6:
				System.out.println();
				System.out.println("   __vVvV___________o__O_o______________VVvv__");
				System.out.println("SMALL BUBBLES POP QUIETLY ON THE SURFACE OF THE SWAMP.");
				break;
			case 5:
				System.out.println();
				System.out.println("   __vVvV_________~~OoO_~Oo~~~__________VVvv__");
				System.out.println("THE SWAMP BUBBLES AND STIRS. BE CAREFUL NOW...");
				break;
			case 4:
				System.out.println();
				System.out.println("                    /\\,_,/\\");
				System.out.println("   __vVvV______~~o~(<0\\ /0>)~o~~_______VVvv__");
				System.out.println("THE MONSTER PEERS FROM THE SURFACE. HAS IT SEEN YOU?");
				break;
			case 3:
				System.out.println();
				System.out.println("                     |\\___/|");
				System.out.println("                    /,   ,  \\");
				System.out.println("                   <0/ /0>   |^~,");
				System.out.println("   __vVvV____~~o~O\\(0_0)_o_O/~oOo~~____VVvv__");
				System.out.println("THE MONSTER RISES SLOWLY FROM THE SWAMP. IT SEES YOU!");
				break;
			case 2:
				System.out.println();
				System.out.println("                   /(  /(");
				System.out.println("                  / |_/ |");
				System.out.println("             __  (@) (@)\\\\\\");
				System.out.println("          (0  0)\\\\`.`...'~v\\\\");
				System.out.println("          (' _' _  '     ,   ,\\\\_/^^\\\\");
				System.out.println("           V~ V~ ~~\\\\  .  '  , `   ' \\\\");
				System.out.println("           /\\\\ /\\\\//_,   `_/   `_/~\\\\ /_");
				System.out.println("         __< ~ ~ ', .,    : :  : ::: \\\\");
				System.out.println("        / _:\\\\ ' ``_  _   _/ / _::_::_ \\\\");
				System.out.println("   __vVv\\\\(_)(_~ `'~~ `'~~  \\\\(_)(_)(_)/vv__");
				System.out.println("IT'S COMING THIS WAY! GUESS QUICKLY, YOU MIGHT STILL ESCAPE!!");
				break;
			case 1: // ASCII art!? WHAT YEAR IS IT?!?!
				System.out.println();
				System.out.println("`,`',  \\    _--~~~~--__  \\'  '/  __--~~~~--_    /  ,'`,'");
				System.out.println("`,' ;   :  /  _,^,_   \\~~-____-~~/   _,^,_  \\  :   ; ',' ");
				System.out.println(" ,  ;    -_\\ ( (@) )  /  '    '  \\  ( (@) ) /_-    ;  ,' ");
				System.out.println("   ;        ~-__'_  --~'~~____~~ '~--__'__-~       ;'  ) ");
				System.out.println(")  ;              ,`;/,,___''__,,\\;',              ;  (  ");
				System.out.println(" .;           ,'`( (__)' __ _ _'(__) ) `',          ;. ) ");
				System.out.println(".).';        ,'`    \\     ~~ ~~   /     `',       ;' .(.");
				System.out.println(" (/,;       '     __  _--~~-~~--_  __       '     ;, \\)  ");
				System.out.println(",/ ;;           ,;  |_ | | | | |_ |   ;,           ;;\\,/");
				System.out.println("/ |#_/;        ;_|  \\  /`~'~'~`\\  /:  |_;         ;/#|\\/");
				System.out.println("\\##/)#;          :  `\\/         \\/`   :        ;#(\\\\##//");
				System.out.println("  #( \\;;          :                  ;        ;;/ )#| \\\\");
				System.out.println(" /#),,`  ;          ;./\\_     _/\\.;         ;   `,,(#\\\\| ");
				System.out.println("   '`       ;        ~~--|~|~|--~~        ;       `',,\\\\ ");
				System.out.println();
				break;
		}
	}
	// Helper method to check for completion of the winning word.
	private static boolean checkForWin(String checkthis) {
		boolean win = false;
		if (!checkthis.contains("-")) {
			win = true;
			System.out.println();
			System.out.println("THE MAGIC WORD MADE THE MONSTER EXPLODE FOR SOME REASON!");
			System.out.println("THAT IS DISGUSTING! MUCK AND GUTS EVERYWHERE! YOU \"WIN\"?");
			System.out.println();
			System.out.println("The word was " + checkthis + ".");
			if (forbidden) { // Is it still a "win" if they threw that switch? Probably not.
				System.out.println();
				System.out.println("Shame you tried that FORBIDDEN curse though.");
				System.out.println("Those dementors surely don't look friendly.");
				System.out.println("           ,           .-.                      ");
				System.out.println("        .--')         (( ))         ,           ");
				System.out.println("       /    /      /\\_.' '._/\\      \\`-,        ");
				System.out.println("      |    /       |         |  .-._/   \\_____)\\");
				System.out.println("   /`.\\   (_.'\\     \\       /  (()             /");
				System.out.println("   \\          /      \\    /`    '-;   ,_____.-' ");
				System.out.println("    '--. .---'     (__)  /       /__.'          ");
				System.out.println("      ( ())        `.__.'                       ");
				System.out.println("       '-'                        GAME OVER     ");
			}
		}
		return win;
	}
	// I'M A WHAT!?
	private static boolean potterverse(String eggCheck) {
		boolean yeraWizard = false;
		if (eggCheck.equals("AVADA KEDAVRA")) {
			System.out.println();
			System.out.println("Seriously? You tried the KILLING curse? Did you not read the instructions?!?");
			System.out.println("Well it didn't work! It seems the monster is quite immune to death magic.");
			System.out.println("You may live long enough to regret that decision. Azkaban is not a nice place.");
			System.out.println();
			yeraWizard = true;
		}
		if (eggCheck.equals("IMPERIO")) {
			System.out.println();
			System.out.println("Ummm, what now? You're trying the IMPERIUS curse? A very bad choice.");
			System.out.println("You get a peek into the mind of the monster and recoil in utter horror.");
			System.out.println("You may have also just drawn the wrong kind of attention to yourself...");
			System.out.println();
			yeraWizard = true;
		}
		if (eggCheck.equals("CRUCIO")) {
			System.out.println();
			System.out.println("Didn't you read about playing by the rules? You tried the CRUCIATUS curse?");
			System.out.println("The curse flies at the monster AND... Nothing. It didn't notice in the slightest.");
			System.out.println("Lucky for you, eh? Perhaps. This monster didn't notice. Others might have.");
			System.out.println();
			yeraWizard = true;
		}
		return yeraWizard;
	}

}
